 Application Programming Interfaces (APIs) enable systems to communicate with each other through standardised specifications. A financial institution may interact with APIs in multiple ways, including:

7.3.16.a consuming APIs from trusted third parties or untrusted public sources;

7.3.16.b publishing its own APIs for external parties to interact with its products and

services; and

7.3.16.c publishing and consuming APIs for internal systems.

7.3.17

In each scenario, a financial institution should carefully assess the benefits and risks of connecting via APIs before implementation.

7.3.18 Prior to consuming APIs from external sources, a financial institution should establish a process to assess each API and the API publisher similar to the due diligence performed on sourced systems. Security characteristics of the API should also be

45

VER01.201124

assessed to ensure that the communications are secured against threat actors and only requisite data can be transmitted.

7.3.19 When developing APIs for external parties’ consumption, a financial institution should conduct API development in accordance with the established framework for system development and testing, and in compliance with established security configurations. Appropriate security design considerations (e.g., key management and authentication, time-delimited, data and transmission encryption, etc.) should be made depending on the expected nature of interactions with external parties (e.g., trusted closed APIs or untrusted open APIs).

7.3.20 A financial institution that publishes APIs should ensure that documentation on the use of its APIs is kept updated to the latest specifications and clearly communicates all security elements that external parties are expected to comply with in the use of its APIs.

7.3.21 A financial institution should ensure that there are no undocumented APIs14 that threat actors could abuse to perform malicious activities in the corporate network.

7.3.22 A financial institution should log all API access activities for security monitoring and implement measures to manage traffic volume (e.g., rate limiting) and protect against malicious attacks on API connected systems. Where external parties abuse the financial institution’s published APIs, a process should be in place to revoke the external parties’ access promptly and securely.

7.3.23 When an API is to be retired or deprecated, a financial institution should safely decouple the API without disrupting any underlying systems or services. The financial institution should provide dependent third-parties sufficient notice of its intentions prior to retiring or deprecating the API.

Internet-Facing Systems

7.3.24 A common attack on online services (e.g., websites, transactional services, updating customer information, etc.) is the ‘man-in-the-middle’ (MITM) attack where a threat actor is able to eavesdrop and alter communications between parties or systems without either being aware that the connection has been compromised. While a financial institution may have robust measures in place to secure its endpoints and networks, MITM attacks can originate from external parties’ (e.g., customers, third parties, etc.) devices.

7.3.25 To protect communications over the internet, a financial institution should implement secure transmission protocols (e.g., TLS, certificate pinning, etc.) to encrypt its systems and connecting parties. Each secure communications between

14 Undocumented or shadow APIs are not meant for use by end users but instead serve as code that developers may use for troubleshooting or automating functionalities.

46

VER01.201124

communication should be time-delimited through stateful session management, with re-authentication required upon session expiry.

7.3.26 Financial institutions should implement web application firewalls that analyse and protect against malicious web-based traffic (e.g., SQL injection, cross-site scripting, etc.).

7.3.27 A financial institution should implement measures to prevent web parameter pollution attacks that exploit the logic of the web application. Sensitive data should not be in the clear in the URL, HTTP data, and cookies, and secure programming techniques should be applied to ensure that only expected data is accepted by the web application.

7.3.28 A financial institution should implement measures (e.g., multi-factor authentication, CAPTCHA15, hidden fields honeypot, image identification, user interaction, etc.) to detect and mitigate tools used by threat actors to target web addresses and parameter values. Such tools enable threat actors to overload a financial institution’s computing resources, extract content for reselling, or even to reverse engineer the website to make customer phishing scams more effective.

7.3.29 Another common attack