# backend/schemas/regulatory_document.py
from pydantic import BaseModel
from typing import Optional

# This is our base schema. It includes fields common to both creation and reading.
class RegulatoryDocumentBase(BaseModel):
    title: str
    jurisdiction: str
    source_url: Optional[str] = None

# This schema is used when creating a new document via the API.
# It inherits all fields from the base schema.
class RegulatoryDocumentCreate(RegulatoryDocumentBase):
    pass # No extra fields needed for creation

# This schema is used when reading a document from the API.
# It includes the 'doc_id' which is generated by the database.
class RegulatoryDocument(RegulatoryDocumentBase):
    doc_id: int

    # This is a Pydantic configuration class.
    # 'orm_mode = True' tells Pydantic to read the data even if it is not a dict,
    # but an ORM model (or any other arbitrary object with attributes).
    # This allows us to map our SQLAlchemy models directly to our Pydantic schemas.
    class Config:
        orm_mode = True
