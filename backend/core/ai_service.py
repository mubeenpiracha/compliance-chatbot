# backend/core/ai_service.py
import os
from pinecone import Pinecone
from llama_index.core import VectorStoreIndex
from llama_index.vector_stores.pinecone import PineconeVectorStore
from llama_index.core.settings import Settings
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.llms.openai import OpenAI
from llama_index.core.prompts import PromptTemplate
from backend.core.config import PINECONE_API_KEY, OPENAI_API_KEY

# --- Global Setup ---
query_engine = None

# Define the mandatory disclaimer text
MANDATORY_DISCLAIMER = (
    "IMPORTANT DISCLAIMER: This information is for preliminary informational purposes only and does not constitute legal, "
    "financial, or professional advice. It is generated by an AI assistant based on the referenced regulatory documents "
    "and may contain errors or omissions. You must consult with qualified legal counsel in the relevant jurisdiction "
    "before making any business decisions."
)

def initialize_ai_service():
    """
    Initializes the AI service by connecting to Pinecone and setting up
    the LlamaIndex query engine.
    """
    global query_engine

    if not PINECONE_API_KEY or not OPENAI_API_KEY:
        print("Warning: API keys for Pinecone or OpenAI are not set.")
        return

    print("Initializing AI Service...")

    Settings.llm = OpenAI(model="gpt-4o", api_key=OPENAI_API_KEY, temperature=0.2)
    Settings.embed_model = OpenAIEmbedding(model="text-embedding-3-small", api_key=OPENAI_API_KEY, dimensions=1536)

    pc = Pinecone(api_key=PINECONE_API_KEY)
    index_name = "compliance-bot-index"
    pinecone_index = pc.Index(index_name)
    vector_store = PineconeVectorStore(pinecone_index=pinecone_index)
    index = VectorStoreIndex.from_vector_store(vector_store)

    # --- NEW: Comprehensive Custom Prompt Template ---
    # This is the detailed prompt you provided.
    qa_prompt_tmpl_str = (
        "You are an AI Regulatory Assistant. Your role is to answer questions about financial regulations based *only* on the provided context. "
        "You must not provide legal advice, opinions, or any information not explicitly found in the context.\n"
        "Context information is below.\n"
        "---------------------\n"
        "{context_str}\n"
        "---------------------\n"
        "**Instructions:**\n"
        "1. Analyze the user's query.\n"
        "2. Formulate a comprehensive answer based *exclusively* on the information within the 'Context information'. Your answer must be objective and factual.\n"
        "3. For every single claim or statement in your answer, you MUST append a citation to the exact source document and page number from the metadata, like this: [Source: file_name, Page: page_label].\n"
        "4. If multiple documents support a single point, cite all of them, like this: [Source: file_name_1, Page: page_label_1], [Source: file_name_2, Page: page_label_2].\n"
        "5. If the context provided is insufficient to answer the query, you MUST respond with: 'I do not have sufficient information in the provided regulations to answer this question. Please consult with qualified legal counsel.' Do not attempt to answer from your own knowledge or speculate.\n"
        "6. Your response MUST end with the following mandatory disclaimer, exactly as written:\n"
        f"'{MANDATORY_DISCLAIMER}'\n\n"
        "Query: {query_str}\n"
        "Answer: "
    )
    qa_prompt_tmpl = PromptTemplate(qa_prompt_tmpl_str)

    query_engine = index.as_query_engine(
        similarity_top_k=3,
        text_qa_template=qa_prompt_tmpl
    )
    print("AI Service Initialized Successfully.")

def get_ai_response(user_message: str) -> str:
    """
    Gets a RAG response from the query engine.
    """
    if query_engine is None:
        return "Error: AI Service is not initialized. Please check API keys."

    print(f"Querying with message: {user_message}")
    try:
        response = query_engine.query(user_message)
        return str(response)
    except Exception as e:
        print(f"An error occurred during query: {e}")
        return "Sorry, I encountered an error while processing your request."

# --- Application Startup ---
initialize_ai_service()