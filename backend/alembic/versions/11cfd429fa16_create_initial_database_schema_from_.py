"""Create initial database schema from scratch

Revision ID: 11cfd429fa16
Revises: 
Create Date: 2025-07-24 19:55:29.835871

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '11cfd429fa16'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('regulatory_documents',
    sa.Column('doc_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('jurisdiction', sa.String(length=10), nullable=False),
    sa.Column('source_url', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('doc_id')
    )
    op.create_index(op.f('ix_regulatory_documents_doc_id'), 'regulatory_documents', ['doc_id'], unique=False)
    op.create_table('document_versions',
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('doc_id', sa.Integer(), nullable=False),
    sa.Column('version_string', sa.String(length=50), nullable=False),
    sa.Column('effective_date', sa.Date(), nullable=False),
    sa.Column('ingestion_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('source_pdf_path', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['doc_id'], ['regulatory_documents.doc_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_index(op.f('ix_document_versions_version_id'), 'document_versions', ['version_id'], unique=False)
    op.create_table('document_chunks',
    sa.Column('chunk_id', sa.UUID(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('vector_id', sa.String(length=255), nullable=False),
    sa.Column('paragraph_id', sa.String(length=100), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('chunk_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['version_id'], ['document_versions.version_id'], ),
    sa.PrimaryKeyConstraint('chunk_id'),
    sa.UniqueConstraint('vector_id')
    )
    op.create_table('ingestion_log',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['version_id'], ['document_versions.version_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_index(op.f('ix_ingestion_log_log_id'), 'ingestion_log', ['log_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ingestion_log_log_id'), table_name='ingestion_log')
    op.drop_table('ingestion_log')
    op.drop_table('document_chunks')
    op.drop_index(op.f('ix_document_versions_version_id'), table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_index(op.f('ix_regulatory_documents_doc_id'), table_name='regulatory_documents')
    op.drop_table('regulatory_documents')
    # ### end Alembic commands ###
